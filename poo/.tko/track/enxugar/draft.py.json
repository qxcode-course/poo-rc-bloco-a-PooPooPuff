{
    "patches": [
        {
            "label": "2025-10-01_20-02-23",
            "content": "@@ -902,32 +902,34 @@\n   break%0A        \n+el\n if args%5B0%5D==%22cri\n@@ -929,24 +929,24 @@\n %5D==%22criar%22:%0A\n-\n             \n@@ -1028,32 +1028,34 @@\n r,size)%0A        \n+el\n if args%5B0%5D==%22sec\n@@ -1111,32 +1111,34 @@\n  %22nao%22)%0A        \n+el\n if args%5B0%5D==%22mos\n@@ -1173,105 +1173,8 @@\n el)%0A\n-        if args%5B0%5D==%22enxugar%22:%0A            amount:int=int(args%5B1%5D)%0A            towel.dry(amount)%0A\n     \n",
            "lines": "48"
        },
        {
            "label": "2025-10-01_20-09-52",
            "content": "@@ -902,34 +902,32 @@\n   break%0A        \n-el\n if args%5B0%5D==%22cri\n@@ -927,24 +927,24 @@\n %5D==%22criar%22:%0A\n+\n             \n@@ -1026,34 +1026,32 @@\n r,size)%0A        \n-el\n if args%5B0%5D==%22sec\n@@ -1107,34 +1107,32 @@\n  %22nao%22)%0A        \n-el\n if args%5B0%5D==%22mos\n@@ -1163,24 +1163,24 @@\n (towel)%0A\n+\n         \n elif arg\n@@ -1171,18 +1171,16 @@\n         \n-el\n if args%5B\n",
            "lines": "51"
        },
        {
            "label": "2025-10-01_20-10-17",
            "content": "@@ -394,61 +394,8 @@\n da%22)\n-%0A    %0A    def wringOut(self):%0A        self.wetness==0\n %0A%0A  \n@@ -1272,69 +1272,8 @@\n nt)%0A\n-        elif args%5B0%5D==%22torcer%22:%0A            towel.wringOut()%0A\n     \n",
            "lines": "51"
        },
        {
            "label": "2025-10-01_20-12-32",
            "content": "@@ -441,16 +441,17 @@\n wetness=\n+=\n 0%0A%0A    d\n",
            "lines": "56"
        },
        {
            "label": "2025-10-01_20-12-59",
            "content": "class Towel:\n    def __init__(self,color:str,size:str):\n        self.color:str=color\n        self.size:str=size\n        self.wetness:int=0\n\n    def isDry(self):\n        return self.wetness==0\n        \n    def dry(self, amount: int)->None:\n        self.wetness+=amount\n        if self.wetness>=self.isMaxWetness():\n            self.wetness=self.isMaxWetness()\n            print(\"toalha encharcada\")\n    \n    def wringOut(self):\n        self.wetness=0\n\n    def isMaxWetness(self)->int:\n        if self.size==\"P\":\n            return 10\n        if self.size==\"M\":\n            return 20\n        if self.size==\"G\":\n            return 30\n        return 0\n        \n    def __str__(self)->str:\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n\ndef main():\n    towel:Towel=Towel(\"\",\"\")\n    while True:\n        line: str=input()\n        print(\"$\"+line)\n        args:list[str]=line.split(\" \")\n\n        if args[0]==\"end\":\n            break\n        elif args[0]==\"criar\":\n            color:str=args[1]\n            size:str=args[2]\n            towel=Towel(color,size)\n        elif args[0]==\"seca\":\n            print(\"sim\" if towel.isDry() else \"nao\")\n        elif args[0]==\"mostrar\":\n            print(towel)\n        elif args[0]==\"enxugar\":\n            amount:int=int(args[1])\n            towel.dry(amount)\n        elif args[0]==\"torcer\":\n            towel.wringOut()\n        else:\n            print(\"fail: command not found\")\n\nmain()",
            "lines": "56"
        }
    ]
}